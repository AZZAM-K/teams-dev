datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  projectsOwned Project[]       @relation("ProjectOwner")
  memberships   ProjectMember[]
  comments      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  InvitesSent     Invite[] @relation("InviteSender")
  InvitesReceived Invite[] @relation("InviteReceiver")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  members ProjectMember[]
  tasks   Task[]
  invites Invite[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  userId    String
  projectId String
  joinedAt  DateTime @default(now())
  task      Task[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   ProjectMember? @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  comments Comment[]
  subtasks SubTask[]
}

model SubTask {
  id        String        @id @default(cuid())
  title     String
  status    SubTaskStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Invite {
  id        String       @id @default(cuid())
  status    InviteStatus @default(PENDING)
  createdAt DateTime     @default(now())

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  invitedBy  String
  inviter    User   @relation("InviteSender", fields: [invitedBy], references: [id], onDelete: Cascade)
  receivedBy String
  receiver   User   @relation("InviteReceiver", fields: [receivedBy], references: [id], onDelete: Cascade)
}

enum Role {
  MANAGER
  MEMBER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
}

enum SubTaskStatus {
  PENDING
  DONE
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}
